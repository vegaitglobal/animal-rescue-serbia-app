diff --git a/node_modules/react-native-animated-ellipsis/dist/AnimatedEllipsis.js b/node_modules/react-native-animated-ellipsis/dist/AnimatedEllipsis.js
index 908626b..977be3f 100644
--- a/node_modules/react-native-animated-ellipsis/dist/AnimatedEllipsis.js
+++ b/node_modules/react-native-animated-ellipsis/dist/AnimatedEllipsis.js
@@ -1,8 +1,24 @@
-import React, { Component } from 'react';
-import { Text, Animated, View, StyleSheet } from 'react-native';
+import React, {Component} from 'react';
+import {Text, Animated, View, StyleSheet, TextPropTypes} from 'react-native';
 import PropTypes from 'prop-types';
 
 export default class AnimatedEllipsis extends Component {
+  static propTypes = {
+    numberOfDots: PropTypes.number,
+    animationDelay: PropTypes.number,
+    minOpacity: PropTypes.number,
+    style: PropTypes.object,
+  };
+
+  static defaultProps = {
+    numberOfDots: 3,
+    animationDelay: 300,
+    minOpacity: 0,
+    style: {
+      color: '#aaa',
+      fontSize: 32,
+    },
+  };
 
   constructor(props) {
     super(props);
@@ -10,7 +26,7 @@ export default class AnimatedEllipsis extends Component {
     this._animation_state = {
       dot_opacities: this.initializeDots(),
       target_opacity: 1,
-      should_animate: true
+      should_animate: true,
     };
   }
 
@@ -34,56 +50,41 @@ export default class AnimatedEllipsis extends Component {
   }
 
   animate_dots(which_dot) {
-    if (!this._animation_state.should_animate) return;
+    if (!this._animation_state.should_animate) {
+      return;
+    }
 
     // swap fade direction when we hit end of list
     if (which_dot >= this._animation_state.dot_opacities.length) {
       which_dot = 0;
       let min = this.props.minOpacity;
-      this._animation_state.target_opacity = this._animation_state.target_opacity == min ? 1 : min;
+      this._animation_state.target_opacity =
+        this._animation_state.target_opacity == min ? 1 : min;
     }
 
     let next_dot = which_dot + 1;
 
     Animated.timing(this._animation_state.dot_opacities[which_dot], {
       toValue: this._animation_state.target_opacity,
-      duration: this.props.animationDelay
+      duration: this.props.animationDelay,
+      useNativeDriver: true,
     }).start(this.animate_dots.bind(this, next_dot));
   }
 
   render() {
-    let dots = this._animation_state.dot_opacities.map((o, i) => React.createElement(
-      Animated.Text,
-      { key: i, style: [this.props.style, { opacity: o }] },
-      ' ',
-      '.'
+    let dots = this._animation_state.dot_opacities.map((o, i) => (
+      <Animated.Text key={i} style={[this.props.style, {opacity: o}]}>
+        {' '}
+        .
+      </Animated.Text>
     ));
 
-    return React.createElement(
-      View,
-      { style: styles.container },
-      dots
-    );
+    return <View style={styles.container}>{dots}</View>;
   }
 }
 
-AnimatedEllipsis.propTypes = {
-  numberOfDots: PropTypes.number,
-  animationDelay: PropTypes.number,
-  minOpacity: PropTypes.number,
-  style: Text.propTypes.style
-};
-AnimatedEllipsis.defaultProps = {
-  numberOfDots: 3,
-  animationDelay: 300,
-  minOpacity: 0,
-  style: {
-    color: '#aaa',
-    fontSize: 32
-  }
-};
 const styles = StyleSheet.create({
   container: {
-    flexDirection: 'row'
-  }
+    flexDirection: 'row',
+  },
 });
